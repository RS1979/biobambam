.TH BAMSEQCHKSUM 1 "March 2014" BIOBAMBAM
.SH NAME
bamseqchksum - produce checksums for primary data in BAM files
.SH SYNOPSIS
.PP
.B bamseqchksum
[options]
.SH DESCRIPTION
bamseqchksum reads a BAM file from stdin, for each record calculates hash digest
checksums over
.IP [1]
flags and sequence
.IP [2]
queryname, flags and sequence
.IP [3]
flags, sequence and qualities
.IP [4]
flags, sequence and source data related aux tags
.PP
where the flags are the least significant byte of the BAM FLAGS containing
only the bits for multiple segments, first segment and last segment. The
sequence is reverse complemented, and quality string reversed, before 
checksumming if the reverse complemented bit is set.
.PP
Depending on the chosen hash digest function either the sum modulo some
power of 2 or the product modulo a prime number of these checksums is taken 
over all non-supplementary and non-secondary BAM alignment records. Separate 
sums or products are reported for combinations of all and QC pass records and for each
readgroup.
.LP
The following key=value pairs can be given:
.PP
.B verbose=<0>:
Valid values are
.IP 1:
print progress report on standard error
.IP 0:
do not print progress report
.PP
.B inputformat=<bam>: input file format
All versions of bamseqchksum come with support for the BAM input format. If
the program in addition is linked to the io_lib package, then the following
options are valid:
.IP bam:
BAM (see http://samtools.sourceforge.net/SAM1.pdf)
.IP sam:
SAM (see http://samtools.sourceforge.net/SAM1.pdf)
.IP cram:
CRAM (see http://www.ebi.ac.uk/ena/about/cram_toolkit)
.PP
.B reference=:
file name of the reference for CRAM input files. If this key is unset, then
the CRAM file header will be scanned for obtaining a reference file name.
.PP
.B hash=<crc32prod>:
hash digest used to compute checksums. All versions of biobambam support the
following functions:
.IP crc32prod:
checksums are computed via crc32 and combined over multiple records by multiplication modulo the prime number 2^31-1.
This is the default and only option for biobambam versions up to 0.0.174.
.IP crc32:
checksums are computed via crc32 and combined by summing up modulo 2^32.
.IP md5:
checksums are computed via md5 and combined by summing up modulo 2^128.
.IP crc32prime32:
identical with crc32prod (alternate implementation for testing purposes)
.IP crc32prime64:
checksums are computed via crc32 and combined over multiple records by multiplication modulo the prime number 2^64-59.
.IP md5prime64:
checksums are computed via md5 and combined over multiple records by multiplication modulo the prime number 2^64-59.
.IP crc32prime96:
checksums are computed via crc32 and combined over multiple records by multiplication modulo the prime number 2^96-17.
.IP md5prime96:
checksums are computed via md5 and combined over multiple records by multiplication modulo the prime number 2^96-17.
.IP crc32prime128:
checksums are computed via crc32 and combined over multiple records by multiplication modulo the prime number 2^128-159.
.IP md5prime128:
checksums are computed via md5 and combined over multiple records by multiplication modulo the prime number 2^128-159.
.IP crc32prime160:
checksums are computed via crc32 and combined over multiple records by multiplication modulo the prime number 2^160-47.
.IP md5prime160:
checksums are computed via md5 and combined over multiple records by multiplication modulo the prime number 2^160-47.
.IP crc32prime192:
checksums are computed via crc32 and combined over multiple records by multiplication modulo the prime number 2^192-237.
.IP md5prime192:
checksums are computed via md5 and combined over multiple records by multiplication modulo the prime number 2^192-237.
.IP crc32prime224:
checksums are computed via crc32 and combined over multiple records by multiplication modulo the prime number 2^224-63.
.IP md5prime224:
checksums are computed via md5 and combined over multiple records by multiplication modulo the prime number 2^224-63.
.IP crc32prime256:
checksums are computed via crc32 and combined over multiple records by multiplication modulo the prime number 2^256-189.
.IP md5prime256:
checksums are computed via md5 and combined over multiple records by multiplication modulo the prime number 2^256-189.
.PP
If libmaus is compiled with support for the nettle library, then the
following options are available:
.IP sha1:
checksums are computed via sha1 and combined by summing up modulo 2^160.
.IP sha1prime64:
checksums are computed via sha1 and combined over multiple records by multiplication modulo the prime number 2^64-59.
.IP sha1prime96:
checksums are computed via sha1 and combined over multiple records by multiplication modulo the prime number 2^96-17.
.IP sha1prime128:
checksums are computed via sha1 and combined over multiple records by multiplication modulo the prime number 2^128-159.
.IP sha1prime160:
checksums are computed via sha1 and combined over multiple records by multiplication modulo the prime number 2^160-47.
.IP sha1prime192:
checksums are computed via sha1 and combined over multiple records by multiplication modulo the prime number 2^192-237.
.IP sha1prime224:
checksums are computed via sha1 and combined over multiple records by multiplication modulo the prime number 2^224-63.
.IP sha1prime256:
checksums are computed via sha1 and combined over multiple records by multiplication modulo the prime number 2^256-189.
.IP sha224:
checksums are computed via sha2-224 and combined by summing up modulo 2^224.
.IP sha224prime64:
checksums are computed via sha2-224 and combined over multiple records by multiplication modulo the prime number 2^64-59.
.IP sha224prime96:
checksums are computed via sha2-224 and combined over multiple records by multiplication modulo the prime number 2^96-17.
.IP sha224prime128:
checksums are computed via sha2-224 and combined over multiple records by multiplication modulo the prime number 2^128-159.
.IP sha224prime160:
checksums are computed via sha2-224 and combined over multiple records by multiplication modulo the prime number 2^160-47.
.IP sha224prime192:
checksums are computed via sha2-224 and combined over multiple records by multiplication modulo the prime number 2^192-237.
.IP sha224prime224:
checksums are computed via sha2-224 and combined over multiple records by multiplication modulo the prime number 2^224-63.
.IP sha224prime256:
checksums are computed via sha2-224 and combined over multiple records by multiplication modulo the prime number 2^256-189.
.IP sha256:
checksums are computed via sha2-256 and combined by summing up modulo 2^256.
.IP sha256prime64:
checksums are computed via sha2-256 and combined over multiple records by multiplication modulo the prime number 2^64-59.
.IP sha256prime96:
checksums are computed via sha2-256 and combined over multiple records by multiplication modulo the prime number 2^96-17.
.IP sha256prime128:
checksums are computed via sha2-256 and combined over multiple records by multiplication modulo the prime number 2^128-159.
.IP sha256prime160:
checksums are computed via sha2-256 and combined over multiple records by multiplication modulo the prime number 2^160-47.
.IP sha256prime192:
checksums are computed via sha2-256 and combined over multiple records by multiplication modulo the prime number 2^192-237.
.IP sha256prime224:
checksums are computed via sha2-256 and combined over multiple records by multiplication modulo the prime number 2^224-63.
.IP sha256prime256:
checksums are computed via sha2-256 and combined over multiple records by multiplication modulo the prime number 2^256-189.
.IP sha384:
checksums are computed via sha2-384 and combined by summing up modulo 2^384.
.IP sha384prime64:
checksums are computed via sha2-384 and combined over multiple records by multiplication modulo the prime number 2^64-59.
.IP sha384prime96:
checksums are computed via sha2-384 and combined over multiple records by multiplication modulo the prime number 2^96-17.
.IP sha384prime128:
checksums are computed via sha2-384 and combined over multiple records by multiplication modulo the prime number 2^128-159.
.IP sha384prime160:
checksums are computed via sha2-384 and combined over multiple records by multiplication modulo the prime number 2^160-47.
.IP sha384prime192:
checksums are computed via sha2-384 and combined over multiple records by multiplication modulo the prime number 2^192-237.
.IP sha384prime224:
checksums are computed via sha2-384 and combined over multiple records by multiplication modulo the prime number 2^224-63.
.IP sha384prime256:
checksums are computed via sha2-384 and combined over multiple records by multiplication modulo the prime number 2^256-189.
.IP sha512:
checksums are computed via sha2-512 and combined by summing up modulo 2^512.
.IP sha512prime64:
checksums are computed via sha2-512 and combined over multiple records by multiplication modulo the prime number 2^64-59.
.IP sha512prime96:
checksums are computed via sha2-512 and combined over multiple records by multiplication modulo the prime number 2^96-17.
.IP sha512prime128:
checksums are computed via sha2-512 and combined over multiple records by multiplication modulo the prime number 2^128-159.
.IP sha512prime160:
checksums are computed via sha2-512 and combined over multiple records by multiplication modulo the prime number 2^160-47.
.IP sha512prime192:
checksums are computed via sha2-512 and combined over multiple records by multiplication modulo the prime number 2^192-237.
.IP sha512prime224:
checksums are computed via sha2-512 and combined over multiple records by multiplication modulo the prime number 2^224-63.
.IP sha512prime256:
checksums are computed via sha2-512 and combined over multiple records by multiplication modulo the prime number 2^256-189.
.SH AUTHOR
Written by David Jackson (using code by German Tischler as a template).
Extended to hash digests beyond crc32prod by German Tischler.
.SH "REPORTING BUGS"
Report bugs to <gt1@sanger.ac.uk>
.SH COPYRIGHT
Copyright \(co 2014-2014 David Jackson, \(co 2014-2014 Genome Research Limited.
Copyright \(co 2009-2014 German Tischler, \(co 2011-2014 Genome Research Limited.
License GPLv3+: GNU GPL version 3 <http://gnu.org/licenses/gpl.html>
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
